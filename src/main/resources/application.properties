# ===============================
# = Server
# ===============================
server.port=8080

# ===============================
# = Thymeleaf
# ===============================
#spring.thymeleaf.prefix=classpath:/templates/
#spring.thymeleaf.suffix=.html
#spring.thymeleaf.mode=HTML5
#spring.thymeleaf.encoding=UTF-8
#spring.thymeleaf.cache=true


# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/stoody_db
spring.datasource.username=postgres
spring.datasource.password=OrxanEliyev00
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=false
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=create-drop
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ===============================
# = AWS (Amazon Web Services)
# ===============================
cloud.aws.credentials.access-key=AKIARALMO6LF77Y6V3XN
cloud.aws.credentials.secret-key=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
cloud.aws.region.static=us-east-1
cloud.aws.stack.auto=false

# ===============================
# = Spring Servlet
# ===============================
#  Multipart file and request size
spring.servlet.multipart.max-file-size=500MB
spring.servlet.multipart.max-request-size=500MB

# ===============================
# = OAuth2
# ===============================
spring.security.oauth2.client.registration.google.client-id=321120958853-q5kljprjo8l2jqgv1qrpi2pdvg0qju49.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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

# ===============================
# = Payment Gateway
# ===============================
# paytm.payment.sandbox.merchantId:
# paytm.payment.sandbox.merchantKey: 
# paytm.payment.sandbox.channelId:WEB
# paytm.payment.sandbox.industryTypeId:Retail
# paytm.payment.sandbox.website:WEBSTAGING
# paytm.payment.sandbox.paytmUrl:https://securegw-stage.paytm.in/order/process
# paytm.payment.sandbox.callbackUrl:http://localhost:8080/pgresponse
# paytm.payment.sandbox.details.MID: ${paytm.payment.sandbox.merchantId}
# paytm.payment.sandbox.details.CHANNEL_ID: ${paytm.payment.sandbox.channelId}
# paytm.payment.sandbox.details.INDUSTRY_TYPE_ID: ${paytm.payment.sandbox.industryTypeId}
# paytm.payment.sandbox.details.WEBSITE: ${paytm.payment.sandbox.website}
# paytm.payment.sandbox.details.CALLBACK_URL: ${paytm.payment.sandbox.callbackUrl}
# paytm.mobile = 
# paytm.email = 